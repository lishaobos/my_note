***对于项目中的一些总结和记录
    1.整体的换肤，整体的样式改变
        1.可以封装一些组件，比如说按钮，可以根据我们的样式来
        2.不需要封装组件的时候可以写整体的 css ，写上几套
            1.在 main.js 中 可以写一个判断样式的函数 function sty (){},在函数中根据判断条件 import ('./x.css') //这种带括号引入可以写在函数中
            2.在 public 文件下的 index.html 也可以判断，然后用js创建一个 link 标签，然后给他的 href 属性变成我们想要的css
            3.经测试 1中 import('xx.css')引入一次就固定了，不会产生动态切换样式的效果
            4.新的思路，给body或者html起一个类名，在不同类名下写入不同的样式，到时候修改 className就可以动态皮肤
        3.上面的方法不好用，所以又研究了两种方法，原理一样。
            1.在 public 文件夹放几套 css 直接js操作，简单粗暴
            2.利用 gulp-css-wrap 批量对css样式添加命名空间，加载的资源是一样的，只是到时候切换class就行。
                方法：
                    //gulpfile.js             //注意，文件名就是这个
                    var path = require('path')
                    var gulp = require('gulp') //这个得全局安装
                    var cleanCSS = require('gulp-clean-css')
                    var cssWrap = require('gulp-css-wrap')
                    gulp.task('css-wrap', function () {
                        return gulp.src(path.resolve('./index.css'))//目标文件
                        /* 找需要添加命名空间的css文件，支持正则表达式 */
                            .pipe(cssWrap({
                                selector: '.fuck' /* 添加的命名空间 */
                            }))
                            .pipe(cleanCSS())
                            .pipe(gulp.dest('./theme')) /* 存放的目录 */
                    })
                    // 执行 gulp css-wrap 命令就ok
       
    2.左边的菜单从数据库获取（意义在于以后可以根据特定的人加载不同的菜单）// vue的 addRoutes 异步路由方法
    2.1 一种权限管理可以用后台路由和前台路由递归对比，筛选出正确的路由。
    2.2 另一种是路由由前端全权负责，后台不用路由表，权限放在路由的 meta 里面，后台只要传一个身份类型就行。
    
    3.王哥：对于像是router里面的组件，或者一些要引入的组件，最后可以配置不打包，然后通过cdn的方式引入，可以加快速度
    
    4.关于 echarts 的一些遇到的东西
        1.resize() 是echarts 提供的方法，可以根据浏览器的视窗大小进行重绘
        2.因为 echarts 是根据已经实例好的 dom 元素进行绘制，所以在进行一些其他操作，比如说是改变主题，或者是要全屏或者其他操作，都得重新 init（注意配
          合 $nextTick）
        3.关于主题或者自己定制主题
            1.系统只提供了 dark light '' 三种基本的主题
            2.使用方法：
                1.在 echarts 官网提供了一些主题，点击定制主题里面也有好多方案，都可以下载，然后这里面也可以自己配置自己的主题
                2.注意第一步下载的主题的文件名是不能自己进行修改的，在vue中得放在 node_moudles 下面的 echarts文件夹下面的theme文件夹下
                3.我们除了第一步官网提供的三个主题，其他都是要额外引入的（例：import 'echarts/theme/chalk.js'）*注意在引入echarts后面引入
                
    5.关于 base64 转码的问题
        1.let reader = new FileReader()
        2.reader.readAsDataURL(文件)
        3.reader.onload = _ => {console.log(reader.result) //这个就是转的 base64 }
        4.最好写上 reader.onerror = _ => {//错误提示} //防止意外发生
    5.1 关于后台传来 excel 流，前台下载流文件。
        1.axios 的 responseType:'arraybuffer' // responseType提供选项（'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'）默认是 json，
        要不然传过来的 excel 文件流会乱码。
        2.let blob = new Blob([流],{type:'application/vnd.ms-excel'})
        3.let a = document.createElement('a'); a.href = URL.createObjectURL(blob);
        4.a.download = '小雨'; //下载的文件名字
        5.a.click(); a.remove(); //进行到这一步就下载成功了
        6.createObjectURL 的用法。
            1.objectURL = URL.createObjectURL(object); //用于创建 URL 的 File 对象、Blob 对象或者 MediaSource 对象。
            2.在每次调用 createObjectURL() 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，
            每个对象必须通过调用 URL.revokeObjectURL() 方法来释放。浏览器会在文档退出的时候自动释放它们，但是为了获得最佳性能和内存使用状况，
            你应该在安全的时机主动释放掉它们。
        
    6.关于项目中的 lodash 的使用
        1.使用深克隆
        2.使用防抖和节流（防止按钮或者事件在短时间内触发多次） //这俩其实是一样的
            1.debounce(function,time,option:{}) //应用场景：input输入完毕触发事件，onresize页面reflow
                debounce就是在time时间内如果触发事件，那么下次触发会延迟到这次点击之后过 time 事件
                选项 leading 是在触发延迟之前执行 （只写这个就是狂点按钮，事件只会在第一次和最后一次生效）
                选项 trailing 是在触发延迟之后执行 （只写这个就是狂点按钮，最后一次生效）
                选项 maxWait 是保证这个时间段内必定执行一次
            2.throttle(function,time,option:{}) //应用场景：滚动条滚动时
                这个其实和 debounce 一样，只是规定time时间段内必定执行一次，只是延迟之前和延迟之后的关系
                
    7.关于 element 遇到的一些日鬼的问题
        1.popover 在表格循环生成的时候会发生无法关闭的问题
            解决办法： 调用不知道在哪里的 doClose 方法
                 <el-popover
                  :ref="'popover-'+scope.row.id"
                  placement="top"
                  width="160"
                  trigger="click"
                >
                  <p>确定删除吗？</p>
                  <div style="text-align: right; margin: 0">
                    <el-button
                      size="mini"
                      type="text"
                      @click="$refs['popover-'+scope.row.id].doClose()"
                    >取消</el-button>
                    <el-button
                      type="danger"
                      size="mini"
                      @click="$refs['popover-'+scope.row.id].doClose(),deldepartment(scope.row.gid)"
                    >确定</el-button>
                  </div>
                  <!-- <el-button slot="reference">删除</el-button> -->
                  <deletes slot="reference"  :disabled="dis"/>
                </el-popover>
     
     8.关于vue的导航栏
        在切换导航的时候，或者用户点击浏览器的前进或者后退的时候，我们得监听路由的实时切换，所以我们在导航这个组件页面中
        只要实时监听当前路由的变化就行了，例如：
        watch:{
            ['$route.path'](newPath,oldPath){
            //这里面我们就可以干我们想干的事情
          }
        }
       
     9.关于 H5 调用手机摄像头
        input 标签提供了 capture 属性,目前知道的有三个
        例如： 'camera'//摄像头 'microphone'//音频 'camcorder'//视频
        调用完成之后获取表单对象里面的文件，做自己想做的事情就行了
     
     10.关于 vue 打包优化问题
        1.cdn 的引用
        vue.config.js中 vue 提供了 configureWebpack 对象，这个对象就是 webpack 的配置项。
        打包配置例子：
            configureWebpack:{
                externals:{
                    //下面这两个的意思就是 vue和element-ui都不会被打包
                    'vue':'Vue',
                    'element-ui':'ELEMENT'
                }
            }
        说明：
            1.externals 里面的 key 是代表全局中的模块 例如：import vue from 'vue'，带引号的这个就是，value 就是这个模块用 cdn 引用时提供的全局变量，
            在打包的时候 webpack 会检索全局中的 key 模块，替换成 value 所对应的全局变量。
            2.Vue.use('')，这种注册就得注释掉了.
            3.cdn 引入放在 实例化 vue 的元素下面，打包的时候依赖包会往 body 里面追加，就在我们 cdn 的下面。
            
      
      10.1.关于vue打包后第一次访问面临的白屏问题
        解决方法，因为 spa 页面所要加载的文件太多，会导致 Vue 实例实例化不能迅速完成，所以就在网上随便找了个css动画，把css引入或者写在
        主体文件的head标签里面，在要实例化 Vue 的标签上面写几个 配合 css 动画的 div，进来就会执行这个动画，然后我们只要在 app.vue的生命周期
        比如 beforeMount js获取到我们的动画 div 删除他就行了，这个还牵扯一个刷新的问题，因为不能每次刷新都进行这个动画，我们只是解决第一次，
        没有进行缓存数据的时候运行动画，所以我们可以在 Vue 实例好之后存储一个 cookie，判断如果有存储 cookie ，就不运行动画，没有就运行。
      
      11.关于 axios 有些后端需要FormData数据格式
        1.把axios请求头变成 headers:{'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'},
        2.引入安装 axios 自带的 qs import qs from 'qs'
        3.在请求拦截的时候格式化数据 qs.stringify(data) 
      
      12.关于 router 的 addRoutes
        1.这个方法可以给实例化的路由添加异步路由信息
        2.关于更换比如说用户的权限菜单，如果要实现不刷新，新路由换掉已有的路由信息，不是追加：
            例：
                //原本的路由
                let router = new VueRouter({
                    routes
                })
                //重置路由的方法
                let resetRouter = (asyncRoutes) => {
                    let router_ = new VueRouter({
                        routes:[]
                    }) 
                    router.matcher = router.matcher //因为路由信息全部存放在matcher里面，这样就相当于初始化路由。
                    asyncRoutes.push({path:'*',redirect:'/404'})//这个得放在最后添加，要不页面会跳转到404
                    router.addRoutes(asyncRoutes)
                }
        3.在路由拦截因为我们要获取异步路由，所以会出现一些问题
            例：
                router.beforeEatch((to,from,next) => {
                    if(***){
                        resetRouter(asyncRoutes)//添加异步路由
                        next(to)//因为直接 next() 页面会跳到404，文档上说是执行addRoutes有可能还没有完成，这样直接就给她跳到一个新的路由元信息
                    }else{
                        next()//下次进来addRoutes会执行完毕，这个 next() 就会直接成功了
                    }
                })
             但是项目中的 刷新会跳转 404 不知道什么原因，已经这样处理过，但是还是会失败，有一丝日鬼。
        
      13.关于异步路由的使用以及遇到的问题。
        前言：在这次交大项目中，疯狂的使用了一把路由，所有信息都是根据路由的参数进行判断生成，也实现了不刷新，切换异步路由的方法。
        1.原理还是还原 router 的 matcher 信息，上面有写。
        2.addRoutes方法使用时遇到的问题
            1.因为当时要用这个方法进行异步路由的注入，就遇到了让人头部炸裂的问题，这个方法只要一执行，就会进入路由守卫 例如 beforeEach
            当时就他妈纳闷这个方法紧接着的一句代码为什么执行不了，最后原因就是进入了路由守卫，所以路由守卫里面的判断和出口的设置非常的重要。
            例如我的加载异步路由就放在路由守卫进行判断执行，然后这个方法中 addRoutes 一执行又会重新进入路由守卫，所以出口很重要。
        3.关于路由 （$route.matched） 信息
            1.这个作用就是返回当前路由的路由元信息，包括他的父级信息，和他的兄弟路由信息，这个就可以利用来做面包屑。
            2.遇到的坑点就是当时想给当前路由元的 matched 信息添加虚假信息，好满足面包屑的需求，但是添加之后路由就崩溃了，故而放弃。
        4.权限切换的实现手段
            1.这次就是根据本地写好全部的路由信息，然后请求异步路由信息，进行路由对比，把该权限所具有的路由映射出来，通过 addRoutes 进行全部更换
        5.关于这次打包遇到的知识。
            1.因为我所有导航上的所有路由都引入的是一个组件，只是根据跳转的路由路径和附带的参数进行判断，动态生成相对应的数据，所以打包的时候我在思考
            会不会造成打包冗余，重复文件打包，然后经过测试，这么多路由引入同一个文件，打包的时候体积是不会变大的，只会按照那一个文件的体积进行打包。
        6.小结。
            操作 vue 路由的时候很谨慎，各种害怕会报错，害怕人家的路由格式不能更改，然后最后发现，原理还是操作 js 的数组或者对象，然后就随便操作了。
