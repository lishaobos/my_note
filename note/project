***对于项目中的一些总结和记录
    1.整体的换肤，整体的样式改变
        1.可以封装一些组件，比如说按钮，可以根据我们的样式来
        2.不需要封装组件的时候可以写整体的 css ，写上几套
            1.在 main.js 中 可以写一个判断样式的函数 function sty (){},在函数中根据判断条件 import ('./x.css') //这种带括号引入可以写在函数中
            2.在 public 文件下的 index.html 也可以判断，然后用js创建一个 link 标签，然后给他的 href 属性变成我们想要的css
            
    2.左边的菜单从数据库获取（意义在于以后可以根据特定的人加载不同的菜单）// vue的 addRoutes 异步路由方法
    
    3.王哥：对于像是router里面的组件，或者一些要引入的组件，最后可以配置不打包，然后通过cdn的方式引入，可以加快速度
    
    4.关于 echarts 的一些遇到的东西
        1.resize() 是echarts 提供的方法，可以根据浏览器的视窗大小进行重绘
        2.因为 echarts 是根据已经实例好的 dom 元素进行绘制，所以在进行一些其他操作，比如说是改变主题，或者是要全屏或者其他操作，都得重新 init（注意配
          合 $nextTick）
        3.关于主题或者自己定制主题
            1.系统只提供了 dark light '' 三种基本的主题
            2.使用方法：
                1.在 echarts 官网提供了一些主题，点击定制主题里面也有好多方案，都可以下载，然后这里面也可以自己配置自己的主题
                2.注意第一步下载的主题的文件名是不能自己进行修改的，在vue中得放在 node_moudles 下面的 echarts文件夹下面的theme文件夹下
                3.我们除了第一步官网提供的三个主题，其他都是要额外引入的（例：import 'echarts/theme/chalk.js'）*注意在引入echarts后面引入
    5.关于 base64 转码的问题
        1.let reader = new FileReader()
        2.reader.readAsDataURL(文件)
        3.reader.onload = _ => {console.log(reader.result) //这个就是转的 base64 }
        4.最好写上 reader.onerror = _ => {//错误提示} //防止意外发生
        
